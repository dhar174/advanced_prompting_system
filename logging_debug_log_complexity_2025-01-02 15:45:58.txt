DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): huggingface.co:443
DEBUG:urllib3.connectionpool:https://huggingface.co:443 "HEAD /dbmdz/bert-large-cased-finetuned-conll03-english/resolve/main/config.json HTTP/11" 200 0
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x7f49023232e0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\nYou are an intelligent assistant that classifies text snippets as \'useful\' or \'junk\' based on their relevance and informativeness in a generated plan.\n\n### Instructions:\n- **Useful**: Contains meaningful information or instructions relevant to a plan, including steps, clarifications, or actionable items.\n- **Junk**: Contains non-informative, filler phrases, repetitive instructions, or generic comments that do not contribute directly to the steps or outcome.\n\nRespond only with a bool that is true for \'useful\' and false for \'junk\'. This bool will be returned as the \'is_useful\' field in the TextClassification class. \n### Examples:\n\n1.\n**Text**: "### PlanStep 2: Set up the development environment - Install Python and create a virtual environment to manage dependencies."\n**Classification**:\n{\n    "is_useful": true\n}\n\n2.\n**Text**: "In the following steps, we will guide you through setting up a development environment."\n**Classification**:\n{\n    "is_useful": false\n}\n\n3.\n**Text**: "PlanStep 5: Configure the network settings - Set up IP addresses and ensure network connectivity."\n**Classification**:\n{\n    "is_useful": true\n}\n\n4.\n**Text**: "The process involves a series of steps that will help you achieve your goal."\n**Classification**:\n{\n    "is_useful": false\n}\n\n5.\n**Text**: "### Final PlanStep: Test the application - Run the application to verify that it meets the specified requirements."\n**Classification**:\n{\n    "is_useful": true\n}\n\n6.\n**Text**: "Please carefully follow each step to ensure success."\n**Classification**:\n{\n    "is_useful": false\n}\n\n7.\n**Text**: "After deployment, monitor the server for any errors or issues."\n**Classification**:\n{\n    "is_useful": true\n}\n\n### New Text:\n\n**Text**: "### PlanStep 2: Install the required software - Download and install Node.js and npm for package management."\n**Classification**:\n'}], 'model': 'gpt-4o-mini', 'n': 1, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'description': 'TextClassification model for representing the classification of a text.', 'properties': {'is_useful': {'title': 'Is Useful', 'type': 'boolean'}}, 'required': ['is_useful'], 'title': 'TextClassification', 'type': 'object', 'additionalProperties': False}, 'name': 'TextClassification', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
DEBUG:openai._base_client:Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
DEBUG:httpcore.connection:connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f48fbba85d0>
DEBUG:httpcore.connection:start_tls.started ssl_context=<ssl.SSLContext object at 0x7f49032cdd90> server_hostname='api.openai.com' timeout=5.0
DEBUG:httpcore.connection:start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f49028604d0>
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 02 Jan 2025 20:46:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-4sal4ylmo57k0rfdzxizc2i3'), (b'openai-processing-ms', b'518'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'2000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'1999512'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'14ms'), (b'x-request-id', b'req_3e6336b89cb1ea83815b5939f0e7015a'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=NToe.gs.kAtW98pria1EOrTqfqDYhVh5Ep.ld_BpiNs-1735850763-1.0.1.1-9j0wOZ_eCXGOEIJJ1Gr70dEHjgSs8.Yq3.Ekuejp2EKu8wDNy9vh12Bu.j4sQlSh8wBxL86zYwqhQSF6It539A; path=/; expires=Thu, 02-Jan-25 21:16:03 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=U98n7XLysf1ysqGNS7hoge53NuhIaPsdl_53pr7TEoY-1735850763206-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8fbd98a22ea986e7-ORD'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Thu, 02 Jan 2025 20:46:03 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-4sal4ylmo57k0rfdzxizc2i3'), ('openai-processing-ms', '518'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '5000'), ('x-ratelimit-limit-tokens', '2000000'), ('x-ratelimit-remaining-requests', '4999'), ('x-ratelimit-remaining-tokens', '1999512'), ('x-ratelimit-reset-requests', '12ms'), ('x-ratelimit-reset-tokens', '14ms'), ('x-request-id', 'req_3e6336b89cb1ea83815b5939f0e7015a'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=NToe.gs.kAtW98pria1EOrTqfqDYhVh5Ep.ld_BpiNs-1735850763-1.0.1.1-9j0wOZ_eCXGOEIJJ1Gr70dEHjgSs8.Yq3.Ekuejp2EKu8wDNy9vh12Bu.j4sQlSh8wBxL86zYwqhQSF6It539A; path=/; expires=Thu, 02-Jan-25 21:16:03 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=U98n7XLysf1ysqGNS7hoge53NuhIaPsdl_53pr7TEoY-1735850763206-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8fbd98a22ea986e7-ORD'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
DEBUG:openai._base_client:request_id: req_3e6336b89cb1ea83815b5939f0e7015a
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x7f49023232e0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\nYou are an intelligent assistant that classifies text snippets as \'useful\' or \'junk\' based on their relevance and informativeness in a generated plan.\n\n### Instructions:\n- **Useful**: Contains meaningful information or instructions relevant to a plan, including steps, clarifications, or actionable items.\n- **Junk**: Contains non-informative, filler phrases, repetitive instructions, or generic comments that do not contribute directly to the steps or outcome.\n\nRespond only with a bool that is true for \'useful\' and false for \'junk\'. This bool will be returned as the \'is_useful\' field in the TextClassification class. \n### Examples:\n\n1.\n**Text**: "### PlanStep 2: Set up the development environment - Install Python and create a virtual environment to manage dependencies."\n**Classification**:\n{\n    "is_useful": true\n}\n\n2.\n**Text**: "In the following steps, we will guide you through setting up a development environment."\n**Classification**:\n{\n    "is_useful": false\n}\n\n3.\n**Text**: "PlanStep 5: Configure the network settings - Set up IP addresses and ensure network connectivity."\n**Classification**:\n{\n    "is_useful": true\n}\n\n4.\n**Text**: "The process involves a series of steps that will help you achieve your goal."\n**Classification**:\n{\n    "is_useful": false\n}\n\n5.\n**Text**: "### Final PlanStep: Test the application - Run the application to verify that it meets the specified requirements."\n**Classification**:\n{\n    "is_useful": true\n}\n\n6.\n**Text**: "Please carefully follow each step to ensure success."\n**Classification**:\n{\n    "is_useful": false\n}\n\n7.\n**Text**: "After deployment, monitor the server for any errors or issues."\n**Classification**:\n{\n    "is_useful": true\n}\n\n### New Text:\n\n**Text**: "In the following steps, we will guide you through the process."\n**Classification**:\n'}], 'model': 'gpt-4o-mini', 'n': 1, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'description': 'TextClassification model for representing the classification of a text.', 'properties': {'is_useful': {'title': 'Is Useful', 'type': 'boolean'}}, 'required': ['is_useful'], 'title': 'TextClassification', 'type': 'object', 'additionalProperties': False}, 'name': 'TextClassification', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
DEBUG:openai._base_client:Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 02 Jan 2025 20:46:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-4sal4ylmo57k0rfdzxizc2i3'), (b'openai-processing-ms', b'464'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'2000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'1999523'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'14ms'), (b'x-request-id', b'req_91cbea5fe409412c32b8c4be5b383110'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8fbd98a66a2786e7-ORD'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 02 Jan 2025 20:46:03 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-4sal4ylmo57k0rfdzxizc2i3', 'openai-processing-ms': '464', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '2000000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '1999523', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '14ms', 'x-request-id': 'req_91cbea5fe409412c32b8c4be5b383110', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8fbd98a66a2786e7-ORD', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:openai._base_client:request_id: req_91cbea5fe409412c32b8c4be5b383110
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x7f49023232e0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\nYou are an intelligent assistant that classifies text snippets as \'useful\' or \'junk\' based on their relevance and informativeness in a generated plan.\n\n### Instructions:\n- **Useful**: Contains meaningful information or instructions relevant to a plan, including steps, clarifications, or actionable items.\n- **Junk**: Contains non-informative, filler phrases, repetitive instructions, or generic comments that do not contribute directly to the steps or outcome.\n\nRespond only with a bool that is true for \'useful\' and false for \'junk\'. This bool will be returned as the \'is_useful\' field in the TextClassification class. \n### Examples:\n\n1.\n**Text**: "### PlanStep 2: Set up the development environment - Install Python and create a virtual environment to manage dependencies."\n**Classification**:\n{\n    "is_useful": true\n}\n\n2.\n**Text**: "In the following steps, we will guide you through setting up a development environment."\n**Classification**:\n{\n    "is_useful": false\n}\n\n3.\n**Text**: "PlanStep 5: Configure the network settings - Set up IP addresses and ensure network connectivity."\n**Classification**:\n{\n    "is_useful": true\n}\n\n4.\n**Text**: "The process involves a series of steps that will help you achieve your goal."\n**Classification**:\n{\n    "is_useful": false\n}\n\n5.\n**Text**: "### Final PlanStep: Test the application - Run the application to verify that it meets the specified requirements."\n**Classification**:\n{\n    "is_useful": true\n}\n\n6.\n**Text**: "Please carefully follow each step to ensure success."\n**Classification**:\n{\n    "is_useful": false\n}\n\n7.\n**Text**: "After deployment, monitor the server for any errors or issues."\n**Classification**:\n{\n    "is_useful": true\n}\n\n### New Text:\n\n**Text**: "### PlanStep 5: Deploy the application - Transfer files to the server and configure environment variables."\n**Classification**:\n'}], 'model': 'gpt-4o-mini', 'n': 1, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'description': 'TextClassification model for representing the classification of a text.', 'properties': {'is_useful': {'title': 'Is Useful', 'type': 'boolean'}}, 'required': ['is_useful'], 'title': 'TextClassification', 'type': 'object', 'additionalProperties': False}, 'name': 'TextClassification', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
DEBUG:openai._base_client:Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 02 Jan 2025 20:46:04 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-4sal4ylmo57k0rfdzxizc2i3'), (b'openai-processing-ms', b'564'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'2000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'1999513'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'14ms'), (b'x-request-id', b'req_8e90b00e018e5291847d0067c11399f1'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8fbd98a9fd0b86e7-ORD'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 02 Jan 2025 20:46:04 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-4sal4ylmo57k0rfdzxizc2i3', 'openai-processing-ms': '564', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '2000000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '1999513', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '14ms', 'x-request-id': 'req_8e90b00e018e5291847d0067c11399f1', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8fbd98a9fd0b86e7-ORD', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:openai._base_client:request_id: req_8e90b00e018e5291847d0067c11399f1
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x7f49023232e0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\nYou are an intelligent assistant that classifies text snippets as \'useful\' or \'junk\' based on their relevance and informativeness in a generated plan.\n\n### Instructions:\n- **Useful**: Contains meaningful information or instructions relevant to a plan, including steps, clarifications, or actionable items.\n- **Junk**: Contains non-informative, filler phrases, repetitive instructions, or generic comments that do not contribute directly to the steps or outcome.\n\nRespond only with a bool that is true for \'useful\' and false for \'junk\'. This bool will be returned as the \'is_useful\' field in the TextClassification class. \n### Examples:\n\n1.\n**Text**: "### PlanStep 2: Set up the development environment - Install Python and create a virtual environment to manage dependencies."\n**Classification**:\n{\n    "is_useful": true\n}\n\n2.\n**Text**: "In the following steps, we will guide you through setting up a development environment."\n**Classification**:\n{\n    "is_useful": false\n}\n\n3.\n**Text**: "PlanStep 5: Configure the network settings - Set up IP addresses and ensure network connectivity."\n**Classification**:\n{\n    "is_useful": true\n}\n\n4.\n**Text**: "The process involves a series of steps that will help you achieve your goal."\n**Classification**:\n{\n    "is_useful": false\n}\n\n5.\n**Text**: "### Final PlanStep: Test the application - Run the application to verify that it meets the specified requirements."\n**Classification**:\n{\n    "is_useful": true\n}\n\n6.\n**Text**: "Please carefully follow each step to ensure success."\n**Classification**:\n{\n    "is_useful": false\n}\n\n7.\n**Text**: "After deployment, monitor the server for any errors or issues."\n**Classification**:\n{\n    "is_useful": true\n}\n\n### New Text:\n\n**Text**: "Please carefully follow each step to avoid issues."\n**Classification**:\n'}], 'model': 'gpt-4o-mini', 'n': 1, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'description': 'TextClassification model for representing the classification of a text.', 'properties': {'is_useful': {'title': 'Is Useful', 'type': 'boolean'}}, 'required': ['is_useful'], 'title': 'TextClassification', 'type': 'object', 'additionalProperties': False}, 'name': 'TextClassification', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
DEBUG:openai._base_client:Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 02 Jan 2025 20:46:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-4sal4ylmo57k0rfdzxizc2i3'), (b'openai-processing-ms', b'448'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'2000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'1999527'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'14ms'), (b'x-request-id', b'req_14b40749f7835cf08f0fa17b688a7494'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8fbd98ae48a186e7-ORD'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 02 Jan 2025 20:46:05 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-4sal4ylmo57k0rfdzxizc2i3', 'openai-processing-ms': '448', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '2000000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '1999527', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '14ms', 'x-request-id': 'req_14b40749f7835cf08f0fa17b688a7494', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8fbd98ae48a186e7-ORD', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:openai._base_client:request_id: req_14b40749f7835cf08f0fa17b688a7494
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x7f49023232e0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\nYou are an intelligent assistant that classifies text snippets as \'useful\' or \'junk\' based on their relevance and informativeness in a generated plan.\n\n### Instructions:\n- **Useful**: Contains meaningful information or instructions relevant to a plan, including steps, clarifications, or actionable items.\n- **Junk**: Contains non-informative, filler phrases, repetitive instructions, or generic comments that do not contribute directly to the steps or outcome.\n\nRespond only with a bool that is true for \'useful\' and false for \'junk\'. This bool will be returned as the \'is_useful\' field in the TextClassification class. \n### Examples:\n\n1.\n**Text**: "### PlanStep 2: Set up the development environment - Install Python and create a virtual environment to manage dependencies."\n**Classification**:\n{\n    "is_useful": true\n}\n\n2.\n**Text**: "In the following steps, we will guide you through setting up a development environment."\n**Classification**:\n{\n    "is_useful": false\n}\n\n3.\n**Text**: "PlanStep 5: Configure the network settings - Set up IP addresses and ensure network connectivity."\n**Classification**:\n{\n    "is_useful": true\n}\n\n4.\n**Text**: "The process involves a series of steps that will help you achieve your goal."\n**Classification**:\n{\n    "is_useful": false\n}\n\n5.\n**Text**: "### Final PlanStep: Test the application - Run the application to verify that it meets the specified requirements."\n**Classification**:\n{\n    "is_useful": true\n}\n\n6.\n**Text**: "Please carefully follow each step to ensure success."\n**Classification**:\n{\n    "is_useful": false\n}\n\n7.\n**Text**: "After deployment, monitor the server for any errors or issues."\n**Classification**:\n{\n    "is_useful": true\n}\n\n### New Text:\n\n**Text**: "### Final PlanStep: Test the application - Run tests to verify functionality."\n**Classification**:\n'}], 'model': 'gpt-4o-mini', 'n': 1, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'description': 'TextClassification model for representing the classification of a text.', 'properties': {'is_useful': {'title': 'Is Useful', 'type': 'boolean'}}, 'required': ['is_useful'], 'title': 'TextClassification', 'type': 'object', 'additionalProperties': False}, 'name': 'TextClassification', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
DEBUG:openai._base_client:Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 02 Jan 2025 20:46:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-4sal4ylmo57k0rfdzxizc2i3'), (b'openai-processing-ms', b'942'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'2000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'1999520'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'14ms'), (b'x-request-id', b'req_27f06434855215837a52e5eda37baa98'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8fbd98b1dc0086e7-ORD'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 02 Jan 2025 20:46:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-4sal4ylmo57k0rfdzxizc2i3', 'openai-processing-ms': '942', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '2000000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '1999520', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '14ms', 'x-request-id': 'req_27f06434855215837a52e5eda37baa98', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8fbd98b1dc0086e7-ORD', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:openai._base_client:request_id: req_27f06434855215837a52e5eda37baa98
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x7f4a56dd7f60>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\nYou are an intelligent assistant that classifies text snippets as \'useful\' or \'junk\' based on their relevance and informativeness in a generated plan.\n\n### Instructions:\n- **Useful**: Contains meaningful information or instructions relevant to a plan, including steps, clarifications, or actionable items.\n- **Junk**: Contains non-informative, filler phrases, repetitive instructions, or generic comments that do not contribute directly to the steps or outcome.\n\nRespond only with a bool that is true for \'useful\' and false for \'junk\'. This bool will be returned as the \'is_useful\' field in the TextClassification class. \n### Examples:\n\n1.\n**Text**: "### PlanStep 2: Set up the development environment - Install Python and create a virtual environment to manage dependencies."\n**Classification**:\n{\n    "is_useful": true\n}\n\n2.\n**Text**: "In the following steps, we will guide you through setting up a development environment."\n**Classification**:\n{\n    "is_useful": false\n}\n\n3.\n**Text**: "PlanStep 5: Configure the network settings - Set up IP addresses and ensure network connectivity."\n**Classification**:\n{\n    "is_useful": true\n}\n\n4.\n**Text**: "The process involves a series of steps that will help you achieve your goal."\n**Classification**:\n{\n    "is_useful": false\n}\n\n5.\n**Text**: "### Final PlanStep: Test the application - Run the application to verify that it meets the specified requirements."\n**Classification**:\n{\n    "is_useful": true\n}\n\n6.\n**Text**: "Please carefully follow each step to ensure success."\n**Classification**:\n{\n    "is_useful": false\n}\n\n7.\n**Text**: "After deployment, monitor the server for any errors or issues."\n**Classification**:\n{\n    "is_useful": true\n}\n\n### New Text:\n\n**Text**: "After deployment, monitor the server for any errors."\n**Classification**:\n'}], 'model': 'gpt-4o-mini', 'n': 1, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'description': 'TextClassification model for representing the classification of a text.', 'properties': {'is_useful': {'title': 'Is Useful', 'type': 'boolean'}}, 'required': ['is_useful'], 'title': 'TextClassification', 'type': 'object', 'additionalProperties': False}, 'name': 'TextClassification', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
DEBUG:openai._base_client:Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 02 Jan 2025 20:46:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-4sal4ylmo57k0rfdzxizc2i3'), (b'openai-processing-ms', b'461'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'2000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'1999526'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'14ms'), (b'x-request-id', b'req_afe7c036187edc71b0e5ae2529e6df37'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8fbd98b8694286e7-ORD'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 02 Jan 2025 20:46:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-4sal4ylmo57k0rfdzxizc2i3', 'openai-processing-ms': '461', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '2000000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '1999526', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '14ms', 'x-request-id': 'req_afe7c036187edc71b0e5ae2529e6df37', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8fbd98b8694286e7-ORD', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:openai._base_client:request_id: req_afe7c036187edc71b0e5ae2529e6df37
DEBUG:openai._base_client:Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x7f4a56dd7f60>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\nYou are an intelligent assistant that classifies text snippets as \'useful\' or \'junk\' based on their relevance and informativeness in a generated plan.\n\n### Instructions:\n- **Useful**: Contains meaningful information or instructions relevant to a plan, including steps, clarifications, or actionable items.\n- **Junk**: Contains non-informative, filler phrases, repetitive instructions, or generic comments that do not contribute directly to the steps or outcome.\n\nRespond only with a bool that is true for \'useful\' and false for \'junk\'. This bool will be returned as the \'is_useful\' field in the TextClassification class. \n### Examples:\n\n1.\n**Text**: "### PlanStep 2: Set up the development environment - Install Python and create a virtual environment to manage dependencies."\n**Classification**:\n{\n    "is_useful": true\n}\n\n2.\n**Text**: "In the following steps, we will guide you through setting up a development environment."\n**Classification**:\n{\n    "is_useful": false\n}\n\n3.\n**Text**: "PlanStep 5: Configure the network settings - Set up IP addresses and ensure network connectivity."\n**Classification**:\n{\n    "is_useful": true\n}\n\n4.\n**Text**: "The process involves a series of steps that will help you achieve your goal."\n**Classification**:\n{\n    "is_useful": false\n}\n\n5.\n**Text**: "### Final PlanStep: Test the application - Run the application to verify that it meets the specified requirements."\n**Classification**:\n{\n    "is_useful": true\n}\n\n6.\n**Text**: "Please carefully follow each step to ensure success."\n**Classification**:\n{\n    "is_useful": false\n}\n\n7.\n**Text**: "After deployment, monitor the server for any errors or issues."\n**Classification**:\n{\n    "is_useful": true\n}\n\n### New Text:\n\n**Text**: "When the FER35r dl.4et, yes\'p"\n**Classification**:\n'}], 'model': 'gpt-4o-mini', 'n': 1, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'description': 'TextClassification model for representing the classification of a text.', 'properties': {'is_useful': {'title': 'Is Useful', 'type': 'boolean'}}, 'required': ['is_useful'], 'title': 'TextClassification', 'type': 'object', 'additionalProperties': False}, 'name': 'TextClassification', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
DEBUG:openai._base_client:Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_headers.complete
DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:send_request_body.complete
DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 02 Jan 2025 20:46:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-4sal4ylmo57k0rfdzxizc2i3'), (b'openai-processing-ms', b'447'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'2000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'1999531'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'14ms'), (b'x-request-id', b'req_4c43bd5d027dd97b19d6bb7db66e721d'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8fbd98bc1c4186e7-ORD'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
DEBUG:httpcore.http11:receive_response_body.complete
DEBUG:httpcore.http11:response_closed.started
DEBUG:httpcore.http11:response_closed.complete
DEBUG:openai._base_client:HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Thu, 02 Jan 2025 20:46:07 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-4sal4ylmo57k0rfdzxizc2i3', 'openai-processing-ms': '447', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '2000000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '1999531', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '14ms', 'x-request-id': 'req_4c43bd5d027dd97b19d6bb7db66e721d', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8fbd98bc1c4186e7-ORD', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
DEBUG:openai._base_client:request_id: req_4c43bd5d027dd97b19d6bb7db66e721d
